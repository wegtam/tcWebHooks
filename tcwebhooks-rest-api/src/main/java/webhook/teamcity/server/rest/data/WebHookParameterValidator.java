package webhook.teamcity.server.rest.data;

import java.util.regex.Pattern;

import jetbrains.buildServer.server.rest.data.PermissionChecker;
import jetbrains.buildServer.serverSide.ProjectManager;
import jetbrains.buildServer.serverSide.SProject;
import jetbrains.buildServer.serverSide.auth.AccessDeniedException;
import jetbrains.buildServer.serverSide.auth.Permission;
import webhook.Constants;
import webhook.teamcity.BuildStateEnum;
import webhook.teamcity.payload.WebHookPayloadTemplate;
import webhook.teamcity.payload.WebHookTemplateManager;
import webhook.teamcity.server.rest.model.template.Template;
import webhook.teamcity.server.rest.model.template.Template.TemplateItem;
import webhook.teamcity.server.rest.model.template.Template.WebHookTemplateStateRest;
import webhook.teamcity.settings.project.WebHookParameter;
import webhook.teamcity.settings.project.WebHookParameterStore;
import webhook.teamcity.server.rest.model.parameter.ProjectWebhookParameter;
import webhook.teamcity.server.rest.model.template.ErrorResult;

public class WebHookParameterValidator {
	private static final String PROJECT_ID_KEY = "projectId";
	private final WebHookParameterStore myWebHookParameterStore;
	private final PermissionChecker myPermissionChecker;
	private final ProjectManager myProjectManager;
	
	public WebHookParameterValidator(WebHookParameterStore webHookParameterStore, PermissionChecker permissionChecker,
			ProjectManager projectManager) {
		this.myWebHookParameterStore = webHookParameterStore;
		this.myPermissionChecker = permissionChecker;
		this.myProjectManager = projectManager;
	}

	public ErrorResult validateNewParameter(String projectId, ProjectWebhookParameter newParameter, ErrorResult result) {
		
		if (newParameter.getId() != null && !newParameter.getId().trim().isEmpty()) {
			result.addError("id-empty", "The parameter id must be empty. It will be generated by Teamcity");
		}
		
		if (newParameter.getName() == null || newParameter.getName().trim().isEmpty()) {
			result.addError("format", "The parameter name cannot be empty.");
		}
		
		validateProjectId(projectId, result);
		validateParameterNameDoesNotExistInProject(projectId, newParameter, result);
		
		return result;
		
	}

	public ErrorResult validateUpdatedParameter(String externalId, ProjectWebhookParameter updatedParameter, ErrorResult result) {
		
		if (updatedParameter.getName() == null || updatedParameter.getName().trim().isEmpty()) {
			result.addError("format", "The parameter name cannot be empty.");
		}
		
		validateProjectId(externalId, result);
		validateParameterIdExistsInProject(externalId, updatedParameter, result);
		
		return result;
	}
	private ErrorResult validateProjectId(String projectId, ErrorResult result) {
		if (projectId != null && !projectId.isEmpty()) {
			SProject sProject = null;
			try {
				sProject = myProjectManager.findProjectByExternalId(projectId);
				
			} catch (AccessDeniedException ex) {
				result.addError(PROJECT_ID_KEY, "The TeamCity project is not visible to your user");
			}
			if (sProject == null) {
				result.addError(PROJECT_ID_KEY, "The projectId must refer to a valid TeamCity project");
			} else {
				if (! myPermissionChecker.isPermissionGranted(Permission.EDIT_PROJECT, sProject.getProjectId())) {
					result.addError(PROJECT_ID_KEY, "The TeamCity project is not writable by your user");
				}
			}
		} else {
			result.addError(PROJECT_ID_KEY, "The projectId cannot be empty");
		}
		return result;
	}
	
	private ErrorResult validateParameterNameDoesNotExistInProject(String projectId, ProjectWebhookParameter requestParameter, ErrorResult result) {
		if (!result.isErrored()) { // Skip if we already have errors.
			SProject sProject = myProjectManager.findProjectByExternalId(projectId);
			if (myWebHookParameterStore.getWebHookParameter(sProject, requestParameter.getName()) != null ) {
				result.addError("name-duplicate", "The parameter name is in use by another parameter in the project with id '" + sProject.getExternalId() + "'");
			}
		}
		return result;
	}
	
	private ErrorResult validateParameterIdExistsInProject(String projectId, ProjectWebhookParameter requestParameter, ErrorResult result) {
		if (!result.isErrored()) { // Skip if we already have errors.
			SProject sProject = myProjectManager.findProjectByExternalId(projectId);
			if (myWebHookParameterStore.getWebHookParameterById(sProject, requestParameter.getId()) == null ) {
				result.addError("id-not-found", "The parameter id was not found in the project with id '" + sProject.getExternalId() + "'");
			}
		}
		return result;
	}
	
}
